from schedule_instance import *
from moead import *
from rework_instance import rework_instance
import pandas as pd
import pickle




def read_cell():
    df = pd.read_excel('result.xlsx')
    # 选择要读取的行，假设为第一行（索引为0）
    row_data = df.iloc[0, :].tolist()

    # 从每个单元格中提取数字并存储到数组中
    numbers = []
    for cell in row_data[1:]:
        try:
            number = int(cell)  # 尝试将单元格内容转换为数字
            numbers.append(number)
        except ValueError:
            pass  # 如果单元格内容不是数字，则跳过
    return numbers


# 写入表格
def Write_cell(sheet, targs, scores):
    wb = openpyxl.load_workbook("result.xlsx")  # 生成一个已存在的wookbook对象
    wb1 = wb.worksheets[sheet]
    for i in range(len(targs)):
        for j1 in range(len(targs[i])):
            wb1.cell(i+1, j1+1, targs[i][j1])
    for j2 in range(len(scores)):
        wb1.cell(len(targs)+1, j2 + 1, scores[j2])
    wb.save("result.xlsx")  # 保存

def Write_cell_terminate(target, teimanate, sheet,line):
    wb = openpyxl.load_workbook("result.xlsx")  # 生成一个已存在的wookbook对象
    wb1 = wb.worksheets[sheet]
    wb1.cell(line, 1, teimanate)
    for j1 in range(1,1+len(target)):
        wb1.cell(line, j1 + 1, target[j1-1])
    wb.save("result.xlsx")  # 保存

def Write_cell_col(Chrom,PVal_st,sheet):
    wb = openpyxl.load_workbook("result.xlsx")  # 生成一个已存在的wookbook对象
    wb1 = wb.worksheets[sheet]
    wb1.cell(1, 1, '染色体')
    wb1.cell(1, 2, 'PVal')
    wb1.cell(1, 3, 'sq')
    wb1.cell(1, 4, 'sm')
    print(PVal_st)
    for j1 in range(len(Chrom)):
        wb1.cell(j1 + 2, 1, Chrom[j1])
    for j2 in range(len(Chrom)):
        wb1.cell(j2 + 2, 2, PVal_st[0][j2])
    for j3 in range(len(Chrom)):
        wb1.cell(j3 + 2, 3, PVal_st[1][j3])
    for j4 in range(len(Chrom)):
        wb1.cell(j4 + 2, 4, PVal_st[2][j4])
    wb.save("result.xlsx")  # 保存





if __name__ == '__main__':
    # 算例输入参数
    # 复杂度
    # OpTime = [[6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
    #           [5.2, 2.3, 2.4, 2.5], [2.2, 2.3, 1.7, 3.7], [4.2, 5.3, 7.4, 1.2], [1.2, 3.4, 6.4, 3.6],
    #           [4.2, 1.3, 1.4, 1.5], [1.2, 1.3, 2.7, 3.7], [6.2, 6.3, 8.4, 9.2], [2.2, 2.4, 7.4, 7.6],
    #           [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
    #           [9.6, 5.7, 9.9, 6.2, 2.5], [5.1, 4.5, 3.8, 4.6, 1.9],
    #           [7.6, 4.7, 8.9, 5.2, 1.5], [5.1, 3.5, 2.8, 5.6, 2.9],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5],
    #           [1.4, 5.1, 7.3, 3.1], [6.4, 7.1, 5.5, 9.1], [4.4, 5.1, 2.7, 3.8], [5.4, 4.1, 8.2, 3.9],
    #           [1.4, 2.1, 9.8, 1.5],
    #           [3.4, 4.1, 6.3, 2.1], [2.4, 8.1, 6.5, 8.1], [3.4, 6.1, 4.7, 5.8], [8.4, 2.1, 7.2, 2.9],
    #           [4.4, 3.1, 1.8, 3.5],
    #           [2.4, 5.1, 6.3, 1.1], [1.4, 4.1, 3.5, 4.1], [2.4, 8.1, 9.7, 6.8], [7.4, 1.1, 6.2, 9.9],
    #           [7.4, 8.1, 3.8, 6.5]]
    # OpType = [[1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2],
    #           [1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2],
    #           [1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1],
    #           [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1],
    #           [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1],
    #           [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1]]
    # RmCost = [10.6, 11.6, 10.2, 6,
    #           15.6, 9.6, 12.2, 6.5,
    #           8.6, 5.6, 3.2, 11.4,
    #           4, 4.9,
    #           5, 4.9,
    #           6, 4.9,
    #           10, 12, 12.7, 12.4, 10.5,
    #           11, 13, 10.7, 6.4, 7.5,
    #           12, 12, 9.7, 8.4, 9.5,
    #           13, 11, 8.7, 11.4, 11.5]
    # # ————————------订单1——————————————————————
    # OpTime = [[6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
    #           [6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
    #           [6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
    #           [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
    #           [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
    #           [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5]]
    # OpType = [[1, 3, 4, 1], [1, 3, 4, 1], [1, 3, 4, 1], [1, 3, 4, 1],
    #           [1, 3, 4, 1], [1, 3, 4, 1], [1, 3, 4, 1], [1, 3, 4, 1],
    #           [1, 3, 4, 1], [1, 3, 4, 1], [1, 3, 4, 1], [1, 3, 4, 1],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1],
    #           [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1],
    #           [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1],
    #           [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1]]
    # RmCost = [10.6, 11.6, 10.2, 6,
    #           10.6, 11.6, 10.2, 6,
    #           10.6, 11.6, 10.2, 6,
    #           4, 4.9,
    #           4, 4.9,
    #           4, 4.9,
    #           10, 12, 12.7, 12.4, 10.5,
    #           10, 12, 12.7, 12.4, 10.5,
    #           10, 12, 12.7, 12.4, 10.5,
    #           10, 12, 12.7, 12.4, 10.5]
    # ————————------订单2——————————————————————
    # OpTime = [[6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
    #           [6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
    #           [6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
    #           [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
    #           [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
    #           [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5]]
    # OpType = [[1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2],
    #           [1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2],
    #           [1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2], [1, 3, 4, 2],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1],
    #           [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1],
    #           [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1],
    #           [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1], [3, 1, 2, 1]]
    # RmCost = [10.6, 11.6, 10.2, 6,
    #           10.6, 11.6, 10.2, 6,
    #           10.6, 11.6, 10.2, 6,
    #           4, 4.9,
    #           4, 4.9,
    #           4, 4.9,
    #           10, 12, 12.7, 12.4, 10.5,
    #           10, 12, 12.7, 12.4, 10.5,
    #           10, 12, 12.7, 12.4, 10.5,
    #           10, 12, 12.7, 12.4, 10.5]
    # ————————------订单3——————————————————————
    OpTime = [[6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
              [6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
              [6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
              [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
              [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
              [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
              [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
              [2.4, 1.1, 4.8, 2.5],
              [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
              [2.4, 1.1, 4.8, 2.5],
              [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
              [2.4, 1.1, 4.8, 2.5],
              [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
              [2.4, 1.1, 4.8, 2.5]]
    OpType = [[1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2],
              [1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2],
              [1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2],
              [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
              [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
              [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
              [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1],
              [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1],
              [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1],
              [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1]]
    RmCost = [10.6, 11.6, 10.2, 6,
              10.6, 11.6, 10.2, 6,
              10.6, 11.6, 10.2, 6,
              4, 4.9,
              4, 4.9,
              4, 4.9,
              10, 12, 12.7, 12.4, 10.5,
              10, 12, 12.7, 12.4, 10.5,
              10, 12, 12.7, 12.4, 10.5,
              10, 12, 12.7, 12.4, 10.5]
    # ————————------订单4——————————————————————
    # OpTime = [[6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
    #           [6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
    #           [6.2, 3.3, 3.4, 4.5], [3.2, 5.3, 3.7, 5.7], [9.2, 3.3, 9.4, 2.2], [7.2, 4.4, 2.4, 6.6],
    #           [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
    #           [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
    #           [4.6, 5.7, 6.9, 7.2, 5.5], [2.1, 8.5, 6.8, 8.6, 2.9],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5],
    #           [2.4, 3.1, 3.3, 4.1], [4.4, 5.1, 5.5, 7.1], [6.4, 7.1, 7.7, 1.8], [6.4, 3.1, 2.2, 1.9],
    #           [2.4, 1.1, 4.8, 2.5]]
    # OpType = [[1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2],
    #           [1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2],
    #           [1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2], [1, 3, 1, 2],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [2, 1, 3, 1, 1], [2, 1, 3, 1, 1],
    #           [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1],
    #           [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1],
    #           [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1],
    #           [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1], [3, 1, 4, 1]]
    # RmCost = [10.6, 11.6, 10.2, 6,
    #           10.6, 11.6, 10.2, 6,
    #           10.6, 11.6, 10.2, 6,
    #           4, 4.9,
    #           4, 4.9,
    #           4, 4.9,
    #           10, 12, 12.7, 12.4, 10.5,
    #           10, 12, 12.7, 12.4, 10.5,
    #           10, 12, 12.7, 12.4, 10.5,
    #           10, 12, 12.7, 12.4, 10.5]
    # ————————------车间参数——————————————————————
    MaType = [[0.52, 0.43, 0.37], [0.81, 0.78, 0.96, 0.91], [0.67, 0.74, 0.66], [0.77]]
    OpCost = [[1.2, 2.2, 3.3], [1.1, 0.9, 1.4, 2.7], [0.8, 1.1, 1.8], [1.2]]
    MTTR = 1.2
    O_key = 2
    # 算法输入参数
    pop_size = 50   # lambda = pop_size
    XOVR = 0.8
    MUTR = 0.4
    static_ter = 150
    dynamic_ter = 200
    archive = pop_size / 10
    T = 15
    scene = 'origin'


    instance = schedule_instance(OpTime, OpType, MaType, RmCost, OpCost, MTTR, O_key)  # 按算例参数生成种群
    # Chroms = instance.init_pop(pop_size)
    # alg = MOEAD_2obj(pop_size, XOVR, MUTR, static_ter, archive, T, instance)    #算法初始化
    # # alg = NSGA2(pop_size, XOVR, MUTR, terminate[ch], archive, T, instance)  # 算法初始化
    # Pop_MOP, targ_pop_, score = alg.evolution(Chroms, scene)  # 静态调度
    #
    # # 静态调度
    # pop = []
    # l = np.array([1,1])
    # for i in range(len(Pop_MOP)):
    #     pop.append(cosine_similarity(targ_pop_[i],l))
    # suit_i = pop.index(min(pop))
    # best_pop = Pop_MOP[suit_i]
    # target, PVal_st = instance.origin_target(best_pop)
    # # PVal, sq, sm = PVal_st[0], PVal_st[1], PVal_st[2]
    # # Write_cell_terminate(best_pop, static_ter, sheet=0, line=1)  # 写excel
    # # alg.plot_figure(best_pop,PVal)                  # 画图
    # # Write_cell_terminate(target, static_ter, sheet=0, line=1)       # 写excel
    # #
    # # 将多个变量组合成一个数据结构（字典）
    # data = {'best_pop': best_pop, 'PVal': PVal_st[0], 'sq': PVal_st[1], 'sm': PVal_st[2]}
    # #
    # # 创建并打开文件，以二进制写入模式打开
    # with open('data_mr2.pkl', 'wb') as f:
    #     pickle.dump(data, f)

    # 从文件中读取字典
    with open('data_mr2.pkl', 'rb') as f:
        loaded_data = pickle.load(f)
    best_pop = loaded_data['best_pop']
    PVal = loaded_data['PVal']
    sq = loaded_data['sq']
    sm = loaded_data['sm']

    # # 右移调度
    target_i = instance.right_shift_target(best_pop)  #不改变染色体best_pop
    Write_cell_terminate(target_i, static_ter, sheet=1, line=1)  # 写excel,这里的terminate是指静态调度的迭代次数，与上面一段指代相同


    # 重调度
    instance_re = rework_instance(OpTime, OpType, MaType, RmCost, OpCost, MTTR, O_key)
    alg_re = MOEAD_3obj(pop_size, XOVR, MUTR, dynamic_ter, archive, T, instance_re)
    target_re = instance_re.complete_re_target(best_pop, sq, sm, alg_re)   # 改变染色体 best_pop
    Write_cell_terminate(target_re, dynamic_ter, sheet=2, line=dynamic_ter)     # 写excel


    # ax.set_xlabel('Cmax')
    # ax.set_ylabel('Qcost')
    # ax.set_zlabel('robust')  # 给三个坐标轴注明坐标名称
    # plt.title("Three objectives ScatterPlot")
    # plt.grid(True)
    # plt.legend()
    # plt.show()


    # J_seq, O_seq, M_seq = instance.decode(best_pop)
    # half_len = len(best_pop) // 2
    # Rework_num = np.arange(1, 20)  # 返工次数
    # J_temp = np.zeros(instance.J_num)  # 每个工序上次的完工时刻
    # M_temp = np.zeros(instance.M_num)  # 每个机器上次的完工时刻
    # Q_cost = 0
    #
    # op = 0
    # Ji, Oi, Mi = J_seq[op], O_seq[op], M_seq[op]  # 工件、工序、机器（从1开始）
    # ## 完全重调度
    # while op < half_len:  # 逐个解码
    #     M_type = instance.OpType[Ji - 1][Oi - 1]  # 设备组
    #     Mi_total = sum(instance.M_type_num[:M_type - 1]) + Mi  # 设备Mi在所有设备中的序号
    #
    #     # 开始加工
    #     t_start = max(J_temp[Ji - 1], M_temp[Mi_total - 1])
    #     opera_t = instance.OpTime[Ji - 1][Oi - 1]
    #     if Oi == 1:  # 是第一道工序
    #         Q_cost += instance.RmCost[Ji - 1]
    #     Q_cost += instance.OpCost[M_type - 1][Mi - 1]  # 加工成本与机器有关
    #
    #     # 是否返工
    #     if M_type == instance.O_key:  # 只有特定类型工序（关键工序返工）设定为工序2
    #         Rework_prob = exponential_pdf(Rework_num, instance.MaType[M_type - 1][Mi - 1])  # 返工概率
    #         Rework_index = 0
    #         while np.random.rand() < Rework_prob[Rework_index]:
    #
    #
    #
    #             opera_t += instance.OpTime[Ji - 1][Oi - 1] * instance.MTTR
    #             Q_cost += instance.OpCost[M_type - 1][Mi - 1]
    #             Rework_index += 1
    #             half_len += 1  # 总工序自增1
    #
    #     t_end = t_start + opera_t
    #     J_temp[Ji - 1], M_temp[Mi_total - 1] = t_end, t_end  # 更新完工时刻
    #     op += 1
    #     half_len += 1
    #
    # Cmax = max(J_temp)
    # target_i = np.array([Cmax, Q_cost])




    # alg.plot_figure(Chroms[0])
    #
    # Write_cell(sheet, targ_pop, score)
